<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Dimitris Paxinos</title>
 <link href="http://www.dpaxinos.com/atom.xml" rel="self"/>
 <link href="http://www.dpaxinos.com/"/>
 <updated>2015-11-01T20:18:14+01:00</updated>
 <id>http://www.dpaxinos.com</id>
 <author>
   <name></name>
   <email></email>
 </author>

 
 <entry>
   <title>Centralized & Structured .NET Logging with Serilog & Seq Part 1</title>
   <link href="http://www.dpaxinos.com//blog/2015/11/Centralized-and-Structured-Logging-With-Serilog-and-Seq-Part1"/>
   <updated>2015-11-01T00:00:00+01:00</updated>
   <id>http://www.dpaxinos.com/blog/2015/11/Centralized-and-Structured-Logging-With-Serilog-and-Seq-Part1</id>
   <content type="html">&lt;h2&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;Serilog and Seq are two open-source tools that can help you introduce a centralized and structured logging mechanism in your .NET application really quickly. Has a quick learning curve and can substantially improve your logging, monitoring and error reporting workflow.&lt;/p&gt;

&lt;h2&gt;The Problem&lt;/h2&gt;

&lt;p&gt;The traditional approach of plain-text file based logging has some very important drawbacks. Log files have to be physically retrieved first and their contents have to subsequently be parsed into a structured form so that we can draw some useful conclusions. &lt;/p&gt;

&lt;p&gt;Retrieving the log file when dealing with a web application is not that hard you might say. What happens if you have a client-server application? How are you going to get the client log files? &lt;/p&gt;

&lt;p&gt;In the enterprise world, where LOB applications run in the intranet, the helpdesk could remotely connect to the computer where the client is running and retrieve the log file. But still... this could be better... &lt;/p&gt;

&lt;h2&gt;Serilog &amp;amp; Seq for the win&lt;/h2&gt;

&lt;p&gt;In this blog post, we are going to start examining a different logging approach which offers:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt; Structured meaningful logging objects&lt;/li&gt;
&lt;li&gt;A central repository for collecting these logs &lt;/li&gt;
&lt;li&gt;A neat web interface with a queryable log list&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;using two open-source tools, Serilog and Seq. The goal is to get from reading to trying it out very fast. &lt;/p&gt;

&lt;h3&gt;What is Serilog?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://serilog.net/&quot;&gt;Serilog&lt;/a&gt; is a logging .NET library like Log4Net which:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Logs structured event data. (complete JSON objects) &lt;/li&gt;
&lt;li&gt;Has a very clean and straightforward syntax. &lt;/li&gt;
&lt;li&gt;Can write the logs to many different places (the so-called &lt;a href=&quot;https://github.com/serilog/serilog/wiki/Provided-Sinks&quot;&gt;Sinks&lt;/a&gt;) like files, the console, DBs etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;What is Seq?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://getseq.net/&quot;&gt;Seq&lt;/a&gt; is a complete solution for storing, displaying and querying structured event data which:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Can be installed in a matter of minutes&lt;/li&gt;
&lt;li&gt;Works out of the box with Serilog&lt;/li&gt;
&lt;li&gt;Has an API for the logs to be submitted&lt;/li&gt;
&lt;li&gt;Has a web interface with a queryable log list&lt;/li&gt;
&lt;li&gt;Has some other cool features like retention and event triggers.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Let&amp;#39;s try it out!&lt;/h2&gt;

&lt;h3&gt;Installing Seq&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Get Seq from &lt;a href=&quot;http://getseq.net/Download&quot;&gt;here&lt;/a&gt; and do a default install &lt;/li&gt;
&lt;li&gt;You can now access the web interface here: &lt;a href=&quot;http://localhost:5341/#/events&quot;&gt;http://localhost:5341/#/events&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Serilog Basics&lt;/h3&gt;

&lt;p&gt;Fire up Visual Studio, create a console application and...&lt;/p&gt;

&lt;h4&gt;NuGet packages&lt;/h4&gt;

&lt;p&gt;Add the following two NuGet packages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Serilog&lt;/li&gt;
&lt;li&gt;Serilog.Sinks.Seq&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Create Logger&lt;/h4&gt;

&lt;p&gt;It is amazingly easy to create a logger that would write to our Seq server:
&lt;script src=&quot;https://gist.github.com/dimitrispaxinos/f34abc870cf39a27e5de.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h4&gt;Publish a log event - Log Event Levels&lt;/h4&gt;

&lt;p&gt;Publishing a log is as easy as using one line of code. You can use any of the following logging levels:
&lt;script src=&quot;https://gist.github.com/dimitrispaxinos/b3571ae6f3f6b48156c9.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;And this is what you would see on the Seq web interface:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/dimitrispaxinos/dimitrispaxinos.github.io/master/_assets/images/CentralizedStructuredLogging/SeqScreenShot_2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;h4&gt;Attaching Parameters&lt;/h4&gt;

&lt;p&gt;Let&amp;#39;s now attach some parameters to our log event and make it a bit more meaningful:
&lt;script src=&quot;https://gist.github.com/dimitrispaxinos/ed1b50385e3b71ec6d8d.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;The two parameters will be included in the logging event object as two additional properties with property names as declared in the log event string, &lt;code&gt;{FirstName}&lt;/code&gt; and &lt;code&gt;{LastName}&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/dimitrispaxinos/dimitrispaxinos.github.io/master/_assets/images/CentralizedStructuredLogging/SeqScreenShot_3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;h4&gt;Attaching Structured Objects&lt;/h4&gt;

&lt;p&gt;As said earlier, one of the strengths of Serilog is its ability to serialize and attach complete structured objects in its log event:
&lt;script src=&quot;https://gist.github.com/dimitrispaxinos/7e0c9389e98a845b9938.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;As you can see below, you have to prefix your property name with &amp;#39;@&amp;#39; in order to be automatically serialized by Serilog:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/dimitrispaxinos/dimitrispaxinos.github.io/master/_assets/images/CentralizedStructuredLogging/SeqScreenShot_4.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;h4&gt;Attaching an Exception&lt;/h4&gt;

&lt;p&gt;Since we can attach stuctured objects, exceptions can also be attached:
&lt;script src=&quot;https://gist.github.com/dimitrispaxinos/ba50c81dae503f17b905.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;and also highlighted in red within Seq:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/dimitrispaxinos/dimitrispaxinos.github.io/master/_assets/images/CentralizedStructuredLogging/SeqScreenShot_5.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;h3&gt;Summing-up Part 1&lt;/h3&gt;

&lt;p&gt;In this first part, we went through the basics of using Serilog and Seq. The goal was to get you quickly up and running so that you can try it out yourself.  In Part 2, we will go through the contextual logging capabilities of Serilog, always in conjunction with Seq.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Book Review - Don't make me think</title>
   <link href="http://www.dpaxinos.com//blog/2015/08/Dont-Make-Me-Think-Book-Review"/>
   <updated>2015-08-30T00:00:00+02:00</updated>
   <id>http://www.dpaxinos.com/blog/2015/08/Dont-Make-Me-Think-Book-Review</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/dimitrispaxinos/dimitrispaxinos.github.io/master/_assets/images/DontMakeMeThinkCover.jpg&quot; alt=&quot;Cover&quot;&gt;&lt;/p&gt;

&lt;h3&gt;TL;DR&lt;/h3&gt;

&lt;p&gt;An easy-to-read book with a wide target audience covering the core aspects of web usability, describing the complete process of usability testing and providing stimulation for further reading.&lt;/p&gt;

&lt;h3&gt;Why this book?&lt;/h3&gt;

&lt;p&gt;Steve Krug&amp;#39;s &lt;a href=&quot;http://www.amazon.com/Dont-Make-Think-Revisited-Usability/dp/0321965515/&quot;&gt;Don&amp;#39;t make me think (Revisited)&lt;/a&gt;  is among the most popular books regarding web usability. It has been on my to-read list for quite some time. After reading &lt;a href=&quot;http://www.amazon.com/Steve-Jobs-Walter-Isaacson/dp/1451648537/&quot;&gt;Steve Job&amp;#39;s biography&lt;/a&gt;*, it was simply the only book I could think of as my next read. &lt;/p&gt;

&lt;h3&gt;General Feeling&lt;/h3&gt;

&lt;p&gt;I will start with its size (approximately 200 pages) which is a huge plus for me since I generally do not like long books. If we now proceed to the book&amp;#39;s content,  it is absolutely obvious that the author generally knows what usability means since he wrote a really usable book!&lt;/p&gt;

&lt;p&gt;It is easy to read without getting tiring at any point.  It uses a lot of tables, diagrams  and pictures in order to visualize a lot of information making the whole reading experience really pleasant.&lt;/p&gt;

&lt;h3&gt;Structure&lt;/h3&gt;

&lt;p&gt;The flow of the book is easy to follow. It is divided into four sections covering:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The basic guiding usability principles according to the user&amp;#39;s usual behavior and expectations.&lt;/li&gt;
&lt;li&gt;The things that definitely have to be done right when creating a web site like navigation and right positioning of information within the page.&lt;/li&gt;
&lt;li&gt;Usability Testing by describing the complete process.&lt;/li&gt;
&lt;li&gt;Mobile usability, accessibility and ways of convincing upper management to invest in
usability testing.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;What I think...&lt;/h3&gt;

&lt;p&gt;As said earlier, this book is a nice read. It talks about and analyzes aspects of web design and usability that people often miss or neglect despite the fact that they are so obvious. I have already found some improvements that can be done in this blog as well.&lt;/p&gt;

&lt;p&gt;It also talks you through the process of usability testing and how you can do it with minimal cost without having to outsource it. This might be extremely useful for companies with limited financial resources like startups.&lt;/p&gt;

&lt;p&gt;The only part of the book that did not come up to my expectations was the mobile usability chapter which was really short and only scratched the surface of the topic.&lt;/p&gt;

&lt;p&gt;To sum up, in my humble opinion, the book&amp;#39;s main goal is to give you an overview of web usability and the basic rules that have to be followed in order to have an acceptably usable web site. The author keeps stimulating the reader and recommending books for digging deeper into specific aspects of usability.&lt;/p&gt;

&lt;h3&gt;Who should read it?&lt;/h3&gt;

&lt;p&gt;The beauty of this book is that, thanks to the way it was written, has a really wide target audience like product managers, web designers and developers. Therefore, anyone professionally involved in UI development from any position and anyone with an affinity for user interface design and usability would definitely benefit from reading this book.&lt;/p&gt;

&lt;p&gt;*&lt;em&gt;Usability and perfect user experience were two of the core passions of  Steve Jobs throughout his life and also two of the core characteristics of all the products he introduced.&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Soft skills matter</title>
   <link href="http://www.dpaxinos.com//blog/2015/08/Soft-Skills-matter"/>
   <updated>2015-08-26T00:00:00+02:00</updated>
   <id>http://www.dpaxinos.com/blog/2015/08/Soft-Skills-matter</id>
   <content type="html">&lt;p&gt;Normal people go out, normal people meet new people.&lt;br&gt;
I am (trying to be) normal too, so I go out and meet new people as well.  &lt;/p&gt;

&lt;p&gt;And after a while, these new people ask me:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/dimitrispaxinos/dimitrispaxinos.github.io/master/_assets/images/SoftSkillsPost_PeopleTalking.png&quot; alt=&quot;Rebase&quot;&gt;
And then they say…  “I would never have guessed it. You don’t talk like one.”
And they consider this a compliment! Well I never get flattered!&lt;/p&gt;

&lt;h3&gt;What do people think of developers?&lt;/h3&gt;

&lt;p&gt;I think that one picture might suffice:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/dimitrispaxinos/dimitrispaxinos.github.io/master/_assets/images/SoftSkillsPost_CaveMan.gif&quot; alt=&quot;Caveman&quot;&gt;&lt;/p&gt;

&lt;p&gt;That’s what people think. That we sit in our cave talking gibberish and scratching our heads while doing stuff with our laptop that no one understands. And when it comes to interacting with other people… well our reputation is not the best in this case…&lt;/p&gt;

&lt;h4&gt;What is the truth about us?&lt;/h4&gt;

&lt;p&gt;The truth is that they are right up to a point. Communication usually does not belong to our strengths. Programmers like coding not talking. We put on our favorite music and start coding. It’s a different world of creativity where you do not need to talk.&lt;/p&gt;

&lt;h4&gt;What happens when we do have to talk?&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;  We sometimes find it hard to communicate with people in general.&lt;/li&gt;
&lt;li&gt;  And when we do, we sometimes have a problem expressing ourselves in plain English.&lt;/li&gt;
&lt;li&gt;  We don’t like meetings.&lt;/li&gt;
&lt;li&gt;  We speak very technical not able to translate what we want to say to the business or normal language.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Why do soft skills matter?&lt;/h4&gt;

&lt;p&gt;Professional developers write code for a living, they write code to fulfill requirements created by people in order to solve problems that other people have. 
Building software is a complex iterative process that requires a lot of human interaction and communication. Poor communication makes this whole process more difficult and makes you less productive. &lt;/p&gt;

&lt;p&gt;By being a good communicator you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Can back up your proposed solutions to technical problems with
convincing arguments.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;Can get your work noticed more.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;Can be the  guy that people turn too in case of a problem because you can understand what they need.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;Can make the business people treat you as a business person since you can speak their &amp;quot;language&amp;quot;.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;Can get you promoted since lead positions require such skills.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;Make generally a difference since you can both code and talk!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And don’t forget…&lt;br&gt;
There are many programmers&lt;br&gt;
There are fewer good programmers&lt;br&gt;
There are fewer good programmers that have some kind of soft skills.&lt;br&gt;
There are only a bunch of good programmers that also have good soft skills.&lt;br&gt;
Be one of them and make a difference!&lt;/p&gt;

&lt;p&gt;So…&lt;br&gt;
Stop talking Assembly or Java!&lt;br&gt;
Try plain English and be nice to other people! &lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Binding an ItemsSource to an Enum</title>
   <link href="http://www.dpaxinos.com//blog/2015/08/Binding-an-Enum-to-an-ItemsSource"/>
   <updated>2015-08-18T00:00:00+02:00</updated>
   <id>http://www.dpaxinos.com/blog/2015/08/Binding-an-Enum-to-an-ItemsSource</id>
   <content type="html">&lt;p&gt;This rather quick post is about enabling an &lt;code&gt;Enum&lt;/code&gt; to be set as the &lt;code&gt;ItemsSource&lt;/code&gt; of a ComboBox, ListBox etc. You can find the sample code on &lt;a href=&quot;https://github.com/dimitrispaxinos/WPFDemos/tree/master/EnumToItemSourceBindingSample&quot;&gt;&lt;strong&gt;Github&lt;/strong&gt;&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Our implementation will result in the following xaml code:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/dimitrispaxinos/01a5e62867ac8700cb2e.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;In the above code snippet, the ItemsSource is bound to the enum &lt;code&gt;Animals&lt;/code&gt;&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/dimitrispaxinos/7198401f09f9f7ba2c5b.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;by introducing a new MarkupExtension called &lt;code&gt;EnumToItemsSourceExtension&lt;/code&gt;:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/dimitrispaxinos/42516a462fb2b6349646.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;By inheriting from the &lt;code&gt;MarkupExtension&lt;/code&gt; class, we have to implement the abstract method &lt;code&gt;ProvideValue&lt;/code&gt; .  Using the &lt;code&gt;Enum.GetValues()&lt;/code&gt; method, we retrieve an array of the values of the constants in the provided enumeration (Animals) and we return it, so that the ItemsSource can bind to it.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>MVVM Command disabling scope for asynchronous operations</title>
   <link href="http://www.dpaxinos.com//blog/2015/04/MVVM-command-disabling-scope-for-asynchronous-operations"/>
   <updated>2015-04-26T00:00:00+02:00</updated>
   <id>http://www.dpaxinos.com/blog/2015/04/MVVM-command-disabling-scope-for-asynchronous-operations</id>
   <content type="html">&lt;h3&gt;Introduction&lt;/h3&gt;

&lt;p&gt;One of the must-have features of all modern applications is constant UI responsiveness. The user interface should never freeze and stay responsive no matter what service calls or other background operations are being executed. So, when there is an operation running in the background, the user should only be able to take certain actions that do not interfere with the running operation.  Two common approaches to tackling this problem would be:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Blocking the UI completely while displaying a loading animation with a message. &lt;/li&gt;
&lt;li&gt;Disabling only the actions (buttons for example) that the user is not allowed to take while the operation is in progress. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this post, we will go through a possible implementation for the second case. You can also find a full working sample of the implementation that follows on &lt;strong&gt;&lt;a href=&quot;https://github.com/dimitrispaxinos/WPFDemos/tree/master/AsyncDisablingScopeSample&quot;&gt;Github&lt;/a&gt;&lt;/strong&gt;. We will start by defining the disabling scope of an operation. &lt;/p&gt;

&lt;h4&gt;Disabling Scope&lt;/h4&gt;

&lt;p&gt;Let&amp;#39;s suppose that we have a contacts list (like the one you can see below) in which we can add a new or update/remove the selected contact (in red). When someone adds a contact by clicking the add button, a time consuming background task is executed (service call). While this task is being executed, the Update and Remove buttons should be disabled. Therefore, these two buttons would be the &lt;strong&gt;disabling scope&lt;/strong&gt; of the Add Button action.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/dimitrispaxinos/dimitrispaxinos.github.io/master/_assets/images/mvvmAsyncCommandScope_OriginalFormWithScope.jpg&quot; alt=&quot;Disabling Scope&quot;&gt;&lt;/p&gt;

&lt;h3&gt;Implementation&lt;/h3&gt;

&lt;p&gt;If you are familiar with the MVVM pattern, then you have definitely already made use of Commands and the &lt;code&gt;ICommand&lt;/code&gt; Interface. There are various implementations of this interface. A popular one, suitable for asynchronous operations is the &lt;a href=&quot;https://gist.github.com/dimitrispaxinos/f051d67a287bb34947a5&quot;&gt;RelayCommandAsync&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The constructor of this implementation looks like this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/dimitrispaxinos/cb0912bd4c132e0e9fca.js&quot;&gt;&lt;/script&gt;

&lt;h4&gt;The Initial Approach&lt;/h4&gt;

&lt;p&gt;We can define the Command Handler and set the conditions under which the Command should be enabled.
An initial approach could look like this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/dimitrispaxinos/68fd37a522ab0b39f613.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The &lt;code&gt;RemoveCommand&lt;/code&gt; can execute when the selected contact is not null and the &lt;code&gt;AddCommand&lt;/code&gt; is not executing. The &lt;code&gt;AddCommandHandler&lt;/code&gt; changes accordingly the boolean &lt;code&gt;IsAddCommandExecuting&lt;/code&gt;  which enables or disables the &lt;code&gt;RemoveCommand&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;The ViewModel condition &lt;code&gt;SelectedContact!= null&lt;/code&gt; is a responsibility of the Command itself. The same could happen with the Disabling scope as well though. When looking at the &lt;code&gt;AddCommand&lt;/code&gt; declaration, you cannot directly see the disabling scope of the Command. &lt;/p&gt;

&lt;h4&gt;One step further&lt;/h4&gt;

&lt;p&gt;What if we introduced a new &lt;code&gt;IDisableable&lt;/code&gt;  interface, a new &lt;code&gt;DisablingScope&lt;/code&gt; class and finally an &lt;code&gt;IDisableableCommand&lt;/code&gt; interface:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/dimitrispaxinos/4a5a27b7bcbd9d2edfa8.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;After these last changes, the &lt;code&gt;IsAddCommandExecuting&lt;/code&gt; is not necessary anymore and the &lt;code&gt;AddCommandHandler&lt;/code&gt; would now look like this: &lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/dimitrispaxinos/ef2f232e281910042318.js&quot;&gt;&lt;/script&gt;

&lt;h4&gt;Polishing up&lt;/h4&gt;

&lt;p&gt;Now, we can directly see which buttons belong to the disabling scope of the Command by looking at the Command Handler. What if we could improve this a little bit more and make it more clear. We could perhaps skip the &lt;code&gt;using&lt;/code&gt; part every time a handler is called. What if we encapsulated this functionality in the &lt;code&gt;RelayCommandAsync&lt;/code&gt; class? Then, we have the following &lt;code&gt;IDisableableCommand&lt;/code&gt; implementation:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/dimitrispaxinos/e3a9ed7d9560b2a8a837.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;After these last changes, the&lt;code&gt;AddCommand&lt;/code&gt; declaration would be:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/dimitrispaxinos/edc847c6d03238d08db7.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;As you can see, it becomes absolutely clear which Commands are being disabled while the &lt;code&gt;AddCommand&lt;/code&gt; is executing and all that without any affecting the &lt;code&gt;AddCommandHandler&lt;/code&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>An animated WPF flowchart</title>
   <link href="http://www.dpaxinos.com//blog/2015/04/An-animated-WPF-flowchart"/>
   <updated>2015-04-12T00:00:00+02:00</updated>
   <id>http://www.dpaxinos.com/blog/2015/04/An-animated-WPF-flowchart</id>
   <content type="html">&lt;h3&gt;Introduction&lt;/h3&gt;

&lt;p&gt;There was recently a need to create an animated flowchart in order to depict the transition between the states of a workflow. This post presents the main points of the implementation. If you prefer to directly dive into the code,  you can find the complete implementation with a working sample on &lt;a href=&quot;https://github.com/dimitrispaxinos/WPFDemos/tree/master/FlowChartDemo&quot;&gt;&lt;strong&gt;Github&lt;/strong&gt;&lt;/a&gt;. The sample includes an animated flowchart for a blog post workflow like the one you can see below.
&lt;img src=&quot;https://raw.githubusercontent.com/dimitrispaxinos/dimitrispaxinos.github.io/master/_assets/images/flowChartPostPic.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;h3&gt;Implementation&lt;/h3&gt;

&lt;p&gt;The goal was to create a reusable component and therefore, the complete functionality is encapsulated in one user control, &lt;code&gt;FlowChartControl&lt;/code&gt;, which has three dependency properties: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; An &lt;code&gt;AvailableStatuses&lt;/code&gt; dependency property of type &lt;em&gt;Type&lt;/em&gt; which is an enum and contains all the available states of the workflow (You could also easily convert this to an &lt;code&gt;IEnumerable&amp;lt;string&amp;gt;&lt;/code&gt; for example).&lt;/li&gt;
&lt;li&gt; A &lt;code&gt;CurrentStatus&lt;/code&gt; dependency property of type &lt;em&gt;Object&lt;/em&gt; which represents the current status of the workflow.&lt;/li&gt;
&lt;li&gt;  An &lt;code&gt;Animate&lt;/code&gt; dependency property of type &lt;em&gt;Bool&lt;/em&gt; which is a flag that indicates whether the chart should animate or not.&lt;/li&gt;
&lt;/ul&gt;

&lt;script src=&quot;https://gist.github.com/dimitrispaxinos/930979b71b7be156bab2.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The &lt;code&gt;FlowChartControl&lt;/code&gt; uses two subcontrols that represent the two geometric shapes available, &lt;code&gt;FlowChartCircle&lt;/code&gt; and &lt;code&gt;FlowChartLine&lt;/code&gt;. These controls include some triggers for defining the necessary color according to the state they are in and a &lt;code&gt;Content&lt;/code&gt; dependency property for setting the state name. The code of these two controls is pretty straight forward and I will not get into the details of the implementation.&lt;/p&gt;

&lt;p&gt;Let us focus on some interesting points of the FlowChartControl class instead.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/dimitrispaxinos/2753638b211bccdcf6a3.js&quot;&gt;&lt;/script&gt;

&lt;h4&gt;PropertyChangedCallback&lt;/h4&gt;

&lt;p&gt;All the action in this control resides in &lt;code&gt;CurrentStatusChangedCallBack()&lt;/code&gt;  which is called every time the &lt;code&gt;CurrentStatus&lt;/code&gt; dependency property is changed.&lt;/p&gt;

&lt;p&gt;This method calls &lt;code&gt;CreateChart()&lt;/code&gt;  which draws the flowchart, a StackPanel with horizontal orientation which we add the &lt;code&gt;FlowChartCircle&lt;/code&gt; and &lt;code&gt;FlowChartLine&lt;/code&gt; controls to.  &lt;/p&gt;

&lt;h4&gt;Animation&lt;/h4&gt;

&lt;p&gt;If the &lt;code&gt;Animate&lt;/code&gt; dependency property is set to false, the opacity of the StackPanel is set to one and the complete flowchart becomes visible straight away. &lt;/p&gt;

&lt;p&gt;If set to true, the &lt;code&gt;CreateStoryBoard()&lt;/code&gt; is called. This method sets the opacity of the flowchart to zero, iterates the StackPanel&amp;#39;s children list and gradually increases the opacity from zero to one producing the desired animation. &lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The WPF talk on dotnetConf 2015</title>
   <link href="http://www.dpaxinos.com//blog/2015/03/The-WPF-talk-on-dotnetConf-2015"/>
   <updated>2015-03-30T00:00:00+02:00</updated>
   <id>http://www.dpaxinos.com/blog/2015/03/The-WPF-talk-on-dotnetConf-2015</id>
   <content type="html">&lt;p&gt;Following the recent posts on the &lt;a href=&quot;http://blogs.msdn.com/b/wpf/&quot;&gt;WPF Team blog&lt;/a&gt; after a long time of inactivity,  Microsoft continued its efforts to show that WPF development remains active by including  a &lt;a href=&quot;http://channel9.msdn.com/Events/dotnetConf/2015/WPF-in-46-and-beyond&quot;&gt;“WPF in 4.6 and beyond”&lt;/a&gt; talk on the &lt;a href=&quot;http://www.dotnetconf.net/&quot;&gt;dotnetConf&lt;/a&gt; 2015 that took place last week. This two day virtual conference included 19 talks in total which can be found on &lt;a href=&quot;http://channel9.msdn.com/Events/dotnetConf/2015&quot;&gt;Channel 9&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The WPF talk provided an overview of the new WPF features that Microsoft is currently working on. Most of the changes and new features were already presented in the WPF Team blog earlier this year. The talk included live demonstration of these new capabilities using Visual Studio and Blend 2015.&lt;/p&gt;

&lt;p&gt;Three were the most important features which were discussed with only one being presented for the first time during this talk. The first two were already known and are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The new &lt;a href=&quot;http://blogs.msdn.com/b/wpf/archive/2015/02/24/expanding-wpf-for-ui-debugging.aspx&quot;&gt;UI Debugging tools&lt;/a&gt; that allow us to have access to the complete visual tree while debugging. This feature will integrate a functionality into Visual Studio 2015 that was until now provided by open source tools like &lt;a href=&quot;https://snoopwpf.codeplex.com/&quot;&gt;Snoop&lt;/a&gt;. &lt;/li&gt;
&lt;li&gt;The &lt;a href=&quot;http://blogs.msdn.com/b/wpf/archive/2015/01/16/new-ui-performance-analysis-tool-for-wpf-applications.aspx&quot;&gt;UI Performance Analysis Tool&lt;/a&gt; which comes as a replacement for the XAML UI
Responsiveness tool which only worked for XAML based Windows Store applications. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But the third and most important one was…&lt;/p&gt;

&lt;h2&gt;WPF App Local&lt;/h2&gt;

&lt;p&gt;App Local shows Microsoft&amp;#39;s clear intention to make WPF also take the vNext path.  This means that, in the near future, a WPF application will be possibly shipping with all the necessary WPF platform assemblies like PresentationFramework, PresentationCore, WindowsBase etc.&lt;/p&gt;

&lt;p&gt;Instead of using the assemblies from the GAC, developers will be able to download a nuget package with all the above mentioned assemblies. &lt;/p&gt;

&lt;p&gt;This change will offer some very important advantages by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Significantly improving performance according to Microsoft.&lt;/li&gt;
&lt;li&gt;Allowing application developers to stop worrying about possible future versions’ incompatibility possibilities.&lt;/li&gt;
&lt;li&gt;Giving the WPF team the ability to take a few more risks regarding future (a bit more radical) features without having to worry that much about any breaking changes.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>The joy of revisiting old code</title>
   <link href="http://www.dpaxinos.com//blog/2015/03/The-Joy-Of-Revisiting-Old-Code"/>
   <updated>2015-03-19T00:00:00+01:00</updated>
   <id>http://www.dpaxinos.com/blog/2015/03/The-Joy-Of-Revisiting-Old-Code</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;What happens to you when you look at old code of yours?&lt;/strong&gt; When I say old, I do not mean code you wrote last week. I am talking about code you wrote a while ago, code that belongs to a project you worked on and might currently be in production for example. That kind of code! Let&amp;#39;s talk about such a case, let&amp;#39;s talk about the moment you go back to that piece of code to either fix a bug or see how you solved a problem you are facing in your current project. &lt;/p&gt;

&lt;p&gt;So... back to my question... how do you feel about it?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;a)&lt;/strong&gt; Are you absolutely proud of your code? &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;b)&lt;/strong&gt; Are you quite happy about it but you feel you could change one thing or two?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;c)&lt;/strong&gt; You feel like refactoring?&lt;/p&gt;

&lt;p&gt;I have to admit that I frequently do pick c).  There are very often quite a few things I don&amp;#39;t like, parts I feel I could have written differently. And realizing this puts a big smile on my face! &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Assuming that you always write high-quality code according to your current skills since you are always doing your best, the fact that you don&amp;#39;t like your own old code &lt;strong&gt;simply proves that you are at least a slightly better developer than a while ago&lt;/strong&gt;, it means that you have done some progress. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, if this happens to you from time to time, this should definitely put a smile on your face too!&lt;/p&gt;

&lt;p&gt;But wait! This smile should not last for too long... Why? Because you realize that this was not the first time you experienced this and is &lt;em&gt;hopefully&lt;/em&gt; not going to be the last one either. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The moments when you realize you are better than earlier but you still know that there is an improved version of yourself waiting in the near future is what keeps you going, what pushes you to keep learning.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next time you feel that you might need some extra motivation, consider having a look at some old code of yours to get back on track ;-)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>A Pageable and Sortable WPF DataGrid</title>
   <link href="http://www.dpaxinos.com//blog/2015/03/A-Pageable-and-Sortable-WPF-DataGrid"/>
   <updated>2015-03-08T00:00:00+01:00</updated>
   <id>http://www.dpaxinos.com/blog/2015/03/A-Pageable-and-Sortable-WPF-DataGrid</id>
   <content type="html">&lt;h2&gt;Introduction&lt;/h2&gt;

&lt;p&gt;There was recently a need for a WPF DataGrid paging and sorting functionality in a project I am currently working on. The goal was to find a reusable solution that can easily be used across the project. A complete working sample can be found on &lt;a href=&quot;https://github.com/dimitrispaxinos/WPFDemos/tree/master/PageableDataGridDemo&quot;&gt;&lt;strong&gt;Github&lt;/strong&gt;&lt;/a&gt;.  In this blog post, we will go through the main points of the implementation. &lt;/p&gt;

&lt;p&gt;This DataGrid has the following features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Page navigation&lt;/li&gt;
&lt;li&gt;Dynamically adjustable page size&lt;/li&gt;
&lt;li&gt;Sorting functionality for the whole item collection&lt;/li&gt;
&lt;li&gt;Item addition at the top of the first page&lt;/li&gt;
&lt;li&gt;Item removal while remaining on the selected page&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/dimitrispaxinos/dimitrispaxinos.github.io/master/_assets/images/wpfDataGridPost_AppScreenShot.png&quot; alt=&quot;Class Diagram&quot;&gt;&lt;/p&gt;

&lt;h2&gt;Implementation&lt;/h2&gt;

&lt;p&gt;The solution can be divided into two parts. We will start with Paging and continue with Sorting. Paging was solely implemented in the ViewModel. Sorting required the ViewModel to be extended and the DataGrid (class) to be subclassed.  &lt;/p&gt;

&lt;p&gt;Although we could have encapsulated the ViewModel paging and sorting functionality in one class, we are going to use two classes, one for paging and another one (which inherits from the paging class) for the sorting so that the implementation is a bit more clear.&lt;/p&gt;

&lt;h3&gt;Paging&lt;/h3&gt;

&lt;p&gt;As said earlier, we are going to implement the functionality using only the ViewModel. We will create a new &lt;code&gt;PageableCollection&amp;lt;T&amp;gt;&lt;/code&gt; class which implements &lt;code&gt;INotifyPropertyChanged&lt;/code&gt;, encapsulates  all the paging logic and exposes an &lt;code&gt;ObservableCollection&amp;lt;T&amp;gt;&lt;/code&gt;  property, &lt;code&gt;CurrentPageItems&lt;/code&gt; for the DataGrid&amp;#39;s ItemsSource to bind to.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/dimitrispaxinos/dimitrispaxinos.github.io/master/_assets/images/wpfDataGridPost_ClassDiagram.png&quot; alt=&quot;Class Diagram&quot;&gt;&lt;/p&gt;

&lt;p&gt;You can see the most important properties and methods in the above table. Although the names are self explanatory, here is a brief description for each one: &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CurrentPageNumber:&lt;/strong&gt; The number of the page we are currently on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CurrentPageItems:&lt;/strong&gt;  An &lt;code&gt;ObservableCollection&amp;lt;T&amp;gt;&lt;/code&gt; which contains the objects of type T that are listed on the current page. The ItemsSource of the DataGrid will be bound to this property&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PageSize:&lt;/strong&gt; The number of entries shown per page. Every time this property gets updated, the whole collection gets reset and returns to the first page.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TotalPagesNumber:&lt;/strong&gt; The total number of pages, depending on the page size.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GoToNextPage, GoToPreviousPage:&lt;/strong&gt; The two navigation void methods we will use to move to the next and previous page respectively.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Add:&lt;/strong&gt; This method is used for adding a new item to our collection . The collection is reset with new item being inserted at the top of the first page.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Remove:&lt;/strong&gt; This method is used for removing an item. The item gets removed while remaining on the same page.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you only need the sorting functionality, you can directly use the&lt;/strong&gt; &lt;code&gt;PageableCollection&amp;lt;T&amp;gt;&lt;/code&gt; &lt;strong&gt;class below.&lt;/strong&gt;&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/dimitrispaxinos/5decda1d12a2de89b3cf.js&quot;&gt;&lt;/script&gt;

&lt;h3&gt;Sorting&lt;/h3&gt;

&lt;p&gt;The problem that has to be tackled is the fact that the DataGrid can only sort its ItemsSource. In our case, this only includes the items of the current page. Therefore, &lt;strong&gt;sorting has to be delegated from the DataGrid to the complete items list.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;In order to achieve that, we have to use some code-behind and since we would like to develop a reusable component, we are going to encapsulate this functionality in a new class deriving from the DataGrid class.&lt;/p&gt;

&lt;p&gt;The new &lt;code&gt;SortableDataGrid&lt;/code&gt; class will be having an &lt;code&gt;ISortable&lt;/code&gt; dependency property
&lt;script src=&quot;https://gist.github.com/dimitrispaxinos/abd7b3e33e7596db0725.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;and the Sort method is going to be called every time the sorting event fires in the Grid. Let us have a look at the class: &lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/dimitrispaxinos/242437281ffe316cb291.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The new &lt;code&gt;SortableDataGrid&lt;/code&gt; class:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Has an &lt;code&gt;ISortable&lt;/code&gt; dependency property &lt;code&gt;FullItemsSource&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;Overrides the &lt;code&gt;OnInitialized&lt;/code&gt; event handler and stores the initial column which is used for sorting.&lt;/li&gt;
&lt;li&gt;Overrides the &lt;code&gt;OnSorting&lt;/code&gt; event handler, cancels the default sorting functionality and calls the Sort method of the &lt;code&gt;ISortable&lt;/code&gt; dependency property with the property name and the sorting direction as input parameters.&lt;/li&gt;
&lt;li&gt;Overrides the &lt;code&gt;OnItemsSourceChanged&lt;/code&gt; event handler in order to retain the sorting direction during page navigation.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The &lt;code&gt;ISortable&lt;/code&gt; interface gets implemented by the &lt;code&gt;SortablePageableCollection&lt;/code&gt; where the property to be used for sorting is found using reflection:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/dimitrispaxinos/90261818ea42833f3605.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Finally, in our XAML code, all we have to do is set the bindings for both the FullItemsSource and  ItemsSource.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/dimitrispaxinos/0a4e67992a1ea9ffe9dc.js&quot;&gt;&lt;/script&gt;
</content>
 </entry>
 
 <entry>
   <title>Trying out a different approach</title>
   <link href="http://www.dpaxinos.com//blog/2015/02/Trying-out-a-different-approach"/>
   <updated>2015-02-22T00:00:00+01:00</updated>
   <id>http://www.dpaxinos.com/blog/2015/02/Trying-out-a-different-approach</id>
   <content type="html">&lt;h3&gt;The Occasion&lt;/h3&gt;

&lt;p&gt;About a month ago, I stumbled across an ad about an event that would take place in Hamburg at the end of January. What kind of event? Its name was &lt;a href=&quot;http://www.businesshackweekend.com/&quot;&gt;“Business Hack Weekend”&lt;/a&gt;. I visited the event&amp;#39;s website and the whole concept seemed intriguing. To be honest, the name &lt;em&gt;“hack”&lt;/em&gt; itself was compelling enough since I had never been to a hackathon or anything of that sort before. Long story short, I decided to go! &lt;/p&gt;

&lt;p&gt;The main idea was that there were a few companies participating which would present one of their business problems. All these problems had to be solved in 54 hours by a team having two to three representatives from the company plus some other participants from various backgrounds, like me. At the end of the two days, each team had to pitch the idea with the best solution winning a prize.&lt;/p&gt;

&lt;p&gt;I arrived at the event&amp;#39;s venue on a Friday afternoon. The atmosphere of the really nice, industrial style place had a strong sense of the startup culture. These last two words bring me to the most important observation of this weekend which was that...&lt;/p&gt;

&lt;p&gt;Every Startuper that  has a minimum self-esteem owns a MacBook. The place was full of them! Everyone was sitting in front of a Mac and I am pretty sure that there was an unofficial ongoing competition regarding the number of stickers that could possibly fit on a Mac. I really felt guilty when I had to get my humble Lenovo out of my bag! :)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/dimitrispaxinos/dimitrispaxinos.github.io/master/_assets/images/MacBookStickers.jpg&quot; alt=&quot;Rebase&quot;&gt;&lt;/p&gt;

&lt;h3&gt;The Initial Disappointment&lt;/h3&gt;

&lt;p&gt;The team I was in had to &lt;em&gt;“help”&lt;/em&gt; &lt;a href=&quot;http://www.stage-entertainment.de/&quot;&gt;Stage Entertainment&lt;/a&gt;, a global leader in live entertainment producing award-winning musicals attract more viewers to their shows. &lt;/p&gt;

&lt;p&gt;I will start by telling you that the weekend did not include any programming at all, not even a single line of code. Boring you may say... That&amp;#39;s what I thought as well! What was I doing there with all these non-coders? I was ready to get down to code for two days straight drinking Red Bull like in the movies. You can perhaps imagine my disappointment.  &lt;/p&gt;

&lt;h3&gt;The Surprise&lt;/h3&gt;

&lt;p&gt;But, to my surprise, it turned out to be actually refreshing. I had the opportunity to meet some really cool people from various backgrounds and see various approaches to the same problem, see things from a different perspective. &lt;/p&gt;

&lt;p&gt;As I wrote earlier, the goal was to attract more people to their shows every year. Can you possibly guess what was the first idea of a software developer like me? I started asking about the online ticketing system, how intuitive it was and how much time was needed in order to purchase a ticket. There were two guys in the team working in the advertising industry. They immediately proposed a new advertising campaign.&lt;/p&gt;

&lt;h3&gt;The Conclusion&lt;/h3&gt;

&lt;p&gt;Everyone focuses on his area of expertise and tries to find a solution in this particular area. And this is perfectly normal. Nevertheless, I believe that it is worth trying to see things from a different point of view by meeting people who tackle the same problem in a completely different way. And I am certain that you will be surprised by the ideas that never crossed your mind.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Nowadays, we get often trapped in our area of expertise since this area itself is very dynamic and already hard to keep up with so there is no time or opportunity to try solve problems differently. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In programming for example, you might realize that you mostly code or solve problems the way you have learned or are used to using a standard technology. Why? Because you have invested time in learning it, you maybe think it is the best approach or because it is simply faster and, as we all know, time is money. &lt;/p&gt;

&lt;p&gt;If you can&amp;#39;t try out a new approach on a professional level, you might just try it in your spare time by meeting people that already do it. And you can attempt all that without leaving your professional comfort zone. As mentioned earlier, you might be really surprised...&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Rewriting history with Git</title>
   <link href="http://www.dpaxinos.com//blog/2015/02/Rewriting-History-with-Git"/>
   <updated>2015-02-08T00:00:00+01:00</updated>
   <id>http://www.dpaxinos.com/blog/2015/02/Rewriting-History-with-Git</id>
   <content type="html">&lt;p&gt;How many times have you wished you could…&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Change or add something in the code you just committed? &lt;/li&gt;
&lt;li&gt;Merge small commits in your project history?&lt;/li&gt;
&lt;li&gt;Keep all commits of a feature branch when transferring your code changes to the main branch?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Well, with Git, all the above is actually possible. Git has been around for a while and there is enough online information regarding its main advantages over centralized version control systems (CVCS). I would like to focus on three not-so-well advertised features that I consider real game changers. &lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;strong&gt;Caution: You should never try to rewrite any public history. The following Git functionalities are only meant to be used with your local commits and not any commits already pushed to the central repository.&lt;/strong&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h3&gt;A Git Workflow in an agile environment&lt;/h3&gt;

&lt;p&gt;Before proceeding to these cool Git features, let&amp;#39;s talk about a possible Git workflow first. On agile software development projects, work is organized in user stories which define the features to be developed. Since branching in Git is very easy and cheap, one approach would be to have one master/dev branch and create further branches for every user story/feature. This has the benefit of each feature being separately developed without interfering with any others. When the feature is ready, it gets integrated into the main branch.&lt;/p&gt;

&lt;h3&gt;Modify your last commit with Git amend&lt;/h3&gt;

&lt;p&gt;I do not know about you but this keeps happening to me quite often; realizing, shortly after committing, that there is something I would like to change in my commit. With Git, all we have to do is make our changes and just type:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;git commit --amend 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This way, we include the new changes in our most recent commit while keeping the original commit message. In case we also want to change the message we just type:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;git commit --amend -m &quot;New commit message&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Squashing your commits with interactive rebase&lt;/h3&gt;

&lt;p&gt;Generally, being able to commit any intermediate changes made before completing a task is very useful, especially when trying different approaches in order to solve a problem. This can also be done using a CVCS, but the project history ends up including many small or meaningless commits. &lt;/p&gt;

&lt;p&gt;This can be easily solved with Git and its &lt;em&gt;interactive rebase&lt;/em&gt;  feature which gives us the opportunity to reorganize the existing commits by squashing different consequent commits into a single one. This results in having a neat project history, with most of our changes grouped together. Such an approach would also allow for much easier code reviews since the code is organized in logical units-commits.  &lt;/p&gt;

&lt;h4&gt;Interactive Rebase Example&lt;/h4&gt;

&lt;p&gt;Let&amp;#39;s go through a simple example. Imagine having a branch with four commits. In our example, we would like to squash the fourth into the third commit.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/dimitrispaxinos/dimitrispaxinos.github.io/master/_assets/images/GitSquash1.png&quot; alt=&quot;Squash&quot;&gt;&lt;/p&gt;

&lt;p&gt;In order to be able to edit the last three commits, we type:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;git rebase -i head~3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and then we are asked to choose the commits to be squashed:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/dimitrispaxinos/dimitrispaxinos.github.io/master/_assets/images/GitSquash2.png&quot; alt=&quot;Squash&quot;&gt;&lt;/p&gt;

&lt;p&gt;We replace &amp;quot;pick&amp;quot; with &amp;quot;squash&amp;quot; for the fourth commit:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/dimitrispaxinos/dimitrispaxinos.github.io/master/_assets/images/GitSquash3.png&quot; alt=&quot;Squash&quot;&gt;&lt;/p&gt;

&lt;p&gt;In order to save the changes and exit the VI editor, we escape and type &lt;code&gt;:wq&lt;/code&gt;.  After this step, we also have the opportunity to modify our commit messages:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/dimitrispaxinos/dimitrispaxinos.github.io/master/_assets/images/GitSquash4.png&quot; alt=&quot;Squash&quot;&gt;&lt;/p&gt;

&lt;p&gt;After replacing the message of the third commit (the fourth one will be included in the third commit), the squash takes place as expected and our branch history finally looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/dimitrispaxinos/dimitrispaxinos.github.io/master/_assets/images/GitSquash5.png&quot; alt=&quot;Squash&quot;&gt;&lt;/p&gt;

&lt;h3&gt;Rebase instead of merge&lt;/h3&gt;

&lt;p&gt;Imagine creating a new branch in order to start working on a new feature according to the Git workflow we talked about earlier. While working on your secondary branch, there are some changes made on the master branch by other members of our team.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/dimitrispaxinos/dimitrispaxinos.github.io/master/_assets/images/GitTwoBranches.PNG&quot; alt=&quot;StyleCop Settings&quot;&gt;&lt;/p&gt;

&lt;p&gt;After finishing our feature, we want to transfer the changes from the secondary to the master branch. The obvious choice would normally be to merge the changes. This would create a new single commit on our master branch with the changes of the secondary branch.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/dimitrispaxinos/dimitrispaxinos.github.io/master/_assets/images/GitMerge.png&quot; alt=&quot;StyleCop Settings&quot;&gt;&lt;/p&gt;

&lt;p&gt;But what if we could directly transfer our neat commits (that we could also clean up using interactive rebase as described above) to your main branch? Git can do that by rebasing instead of merging. Rebasing actually means reapplying the commits of the secondary branch on your master branch starting after the last commit on the master branch.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/dimitrispaxinos/dimitrispaxinos.github.io/master/_assets/images/GitRebase.png&quot; alt=&quot;StyleCop Settings&quot;&gt;&lt;/p&gt;

&lt;p&gt;This option can contribute to keeping a very clean project history while retaining all steps towards developing your new feature. &lt;/p&gt;

&lt;h4&gt;Rebase Example&lt;/h4&gt;

&lt;p&gt;Let&amp;#39;s now have a look at an example to make it more clear. We will continue working on the example we started a while ago for showing the interactive rebase feature. We were working on the master branch and now, we will create one more branch for a feature &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;git branch featureBranch
git checkout featureBranch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;where we will do two more commits. The history would then look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/dimitrispaxinos/dimitrispaxinos.github.io/master/_assets/images/GitRebaseCmd1.png&quot; alt=&quot;Rebase&quot;&gt;&lt;/p&gt;

&lt;p&gt;If we now return to our master branch &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;git checkout master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and do another two commits there as well, its history will look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/dimitrispaxinos/dimitrispaxinos.github.io/master/_assets/images/GitRebaseCmd2.png&quot; alt=&quot;Rebase&quot;&gt;&lt;/p&gt;

&lt;p&gt;We will transfer our changes from our feature branch now by reapplying the commits one by one on top of our last commit on the master branch.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;git rebase featureBranch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After rebasing, the history of the master branch will be looking like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/dimitrispaxinos/dimitrispaxinos.github.io/master/_assets/images/GitRebaseCmd4.png&quot; alt=&quot;Rebase&quot;&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Keeping a consistent coding style with StyleCop</title>
   <link href="http://www.dpaxinos.com//blog/2015/01/Keeping%20a%20consistent%20coding%20style%20with%20StyleCop"/>
   <updated>2015-01-25T00:00:00+01:00</updated>
   <id>http://www.dpaxinos.com/blog/2015/01/Keeping a consistent coding style with StyleCop</id>
   <content type="html">&lt;h3&gt;Coding Style and its Importance&lt;/h3&gt;

&lt;p&gt;According to &lt;a href=&quot;http://en.wikipedia.org/wiki/Programming_style&quot;&gt;Wikipedia&lt;/a&gt; , programming or coding style &lt;em&gt;&amp;quot;is a set of rules or guidelines used when writing the source code for a computer program&amp;quot;&lt;/em&gt;.  Well factored code with consistent style provides your projects and your team with additional value. The code has a standard structure which makes it easily readable and reduces the time needed by new or existing developers in your team to understand your code.&lt;/p&gt;

&lt;h3&gt;What is StyleCop and why should I use it?&lt;/h3&gt;

&lt;p&gt;Within a team, people usually agree on a common writing style coming up with some rules that have to be followed by all team members. This is where &lt;a href=&quot;https://stylecop.codeplex.com/&quot;&gt;StyleCop&lt;/a&gt; comes to rescue since it is an open source project of Microsoft which, as stated on the project’s website, &lt;em&gt;“analyzes C# source code to enforce a set of style and consistency rules”.&lt;/em&gt; StyleCop can be run either locally on every computer from inside Visual Studio or centrally when integrated with your CI server. &lt;/p&gt;

&lt;h3&gt;StyleCop Rules&lt;/h3&gt;

&lt;p&gt;The installation of StyleCop is straightforward. Once installed, you can go to the installation folder and open the &lt;em&gt;Settings.StyleCop&lt;/em&gt; file. All StyleCop rules are located in this file. StyleCop ships with a default configuration file which can be easily modified through its configuration editor as you can see in the picture below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/dimitrispaxinos/dimitrispaxinos.github.io/master/_assets/images/StyleCopSettings.png&quot; alt=&quot;StyleCop Settings&quot;&gt;&lt;/p&gt;

&lt;h3&gt;Visual Studio&lt;/h3&gt;

&lt;p&gt;Once you install StyleCop, you can start using it from within Visual Studio. You can check your code at solution, project or file level by executing the &amp;quot;Run StyleCop&amp;quot; command in every context menu. Code that does not conform with the StyleCop rules is underlined and the tooltip informs us about the exact rule which is violated providing also the rule&amp;#39;s Id as you can see below. You can find the rule in the configuration file of StyleCop by entering the rule&amp;#39;s Id in the &amp;quot;Find&amp;quot; text box in the upper right corner of the configuration editor.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/dimitrispaxinos/dimitrispaxinos.github.io/master/_assets/images/StyleCopSnippet.png&quot; alt=&quot;StyleCop Settings&quot;&gt;&lt;/p&gt;

&lt;h3&gt;Multiple Configuration Files&lt;/h3&gt;

&lt;p&gt;When StyleCop runs, it first looks for a settings file in the same folder where the .cs file is and then starts going up the folders until it finds the next available configuration file. This offers a great flexibility since you can have different configuration files at project, solution or machine level.&lt;/p&gt;

&lt;h3&gt;MSBuild&lt;/h3&gt;

&lt;p&gt;It is also possible to run all StyleCop checks at every build and see the violations as warnings in your output window. This has to be configured at project level and can be done in two ways, either by &lt;a href=&quot;https://stylecop.codeplex.com/wikipage?title=Setting%20Up%20StyleCop%20MSBuild%20Integration&quot;&gt;modifying your project file&lt;/a&gt; or by referencing the StyleCop.Msbuild NuGet package. And if you are absolutely serious about it, there is also another option that enables to treat StyleCop violations as build errors.&lt;/p&gt;

&lt;h3&gt;Continuous Integration Server&lt;/h3&gt;

&lt;p&gt;As mentioned above, you can integrate StyleCop with the CI server of your choice. The technical aspect of this goes beyond the scope of this post. Despite that, here are two good tutorials for &lt;a href=&quot;http://www.towfeek.se/2014/05/customize-your-tfs-build-process-to-run-stylecop/&quot;&gt;TFS&lt;/a&gt; and &lt;a href=&quot;http://www.andyfrench.info/2014/06/integrating-stylecop-with-teamcity.html&quot;&gt;TeamCity&lt;/a&gt;. &lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Web Api OData Endpoint for multiple databases with the same schema</title>
   <link href="http://www.dpaxinos.com//blog/2014/10/One-OData-Endpoint-for-multiple-databases-with-the-same-schema"/>
   <updated>2014-10-10T00:00:00+02:00</updated>
   <id>http://www.dpaxinos.com/blog/2014/10/One-OData-Endpoint-for-multiple-databases-with-the-same-schema</id>
   <content type="html">&lt;h2&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In the .NET world, you can easily expose your database data using OData, Web Api and Entity Framework. There are many tutorials about this on &lt;a href=&quot;http://www.asp.net&quot;&gt;Microsoft&amp;#39;s site&lt;/a&gt;. Unfortunately, all the tutorials I have found online are exposing data from only one database. So, usually, you end up having an OData endpoint with a Url like this:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;http://servername/OData/EntityName&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;What I wanted to achieve was to have one endpoint for more databases with the same schema. So the goal was to finally have a Url like this:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;http://servername/OData/&lt;/em&gt;&lt;em&gt;DatabaseName&lt;/em&gt;&lt;em&gt;/EntityName&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Implementation&lt;/h2&gt;

&lt;p&gt;If you like to go through the code of this example, you can find it on &lt;a href=&quot;https://github.com/dimitrispaxinos/OData.MultipleDatabaseEndpoint&quot;&gt;&lt;strong&gt;Github&lt;/strong&gt;&lt;/a&gt;.  Our requirement is to create an endpoint in order to expose the products of a company. This company has two stores, one in Hamburg and one in Berlin with two different identical databases and we would like to be able to query the products of both databases using the same endpoint:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;http://servername/OData/hamburg/Products&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;http://servername/OData/berlin/Products&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This sample endpoint was created using Web API and Entity Framework as an ORM. You can modify the code accordingly in case you want to use the ORM of your choice. I also used Unity as an IOC container since dependency injection is quite crutial in this scenario. &lt;/p&gt;

&lt;p&gt;We will focus on and go through the three most critical points of the implementation that have to do with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Providing the right connection string to Entity Framwork&lt;/li&gt;
&lt;li&gt;Handling the provided Url, extracting the store location and routing it accordingly.&lt;/li&gt;
&lt;li&gt;Unity and Object Lifetime &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Connection String&lt;/h3&gt;

&lt;p&gt;Our Entity Framework Context class looks like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ProductsContext&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DbContext&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ProductsContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name=HamburgDB&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ProductsContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connectionString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connectionString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DbSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Products&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and is directly used by the controller in order to do all the queries. So, the information about the  connection string has to be passed to the controller and subsequently to the EF context. In order to do that, we create the following interface which is responsible for retrieving the right connection string:  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IConnectionStringProvider&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetConnectionString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;An instance of an implementation of the above interface will be injected into the constructor of the controller every time it is instantiated using Unity. The provided connection string will be subsequently passed to the constructor of the EF context:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ProductsController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApiController&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProductsContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ProductsController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IConnectionStringProvider&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connectionStringProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_db&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ProductsContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connectionStringProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetConnectionString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We just saw how the connection string reaches the constructor of the EF context. Following the interface segregation principle and in order to set the connection string, we will use one more interface, the &lt;/inlinecode&gt;IConnectionStringSetter&lt;/inlinecode&gt; which inherits from the &lt;inlinecode&gt;IConnectionStringProvider&lt;/inlinecode&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IConnectionStringSetter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IConnectionStringProvider&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SetConnectionString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storeName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A simple implementation of IConnectionStringSetter would look like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConnectionStringSetter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IConnectionStringSetter&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StoreName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SetConnectionString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storeName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;StoreName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storeName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetConnectionString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StoreName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can of course adjust the methods according to the way we set and retrieve the connection string, add validations etc.&lt;/p&gt;

&lt;h3&gt;Routing&lt;/h3&gt;

&lt;p&gt;We saw earlier that our goal is to have a Url that looks like this:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;http://servername/OData/&lt;/em&gt;&lt;em&gt;DatabaseName&lt;/em&gt;&lt;em&gt;/EntityName&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;which means that we have to somehow access the Url before it is handled, extract the information we need in order to pick the right database and restore the Url to its normal form:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;http://servername/OData/EntityName&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This can be achieved by creating our own path handler class. This class inherits from the &lt;inlinecode&gt;DefaultODataPathHandler&lt;/inlinecode&gt; class and gets an &lt;inlinecode&gt;IConnectionStringSetter&lt;/inlinecode&gt;  object injected into its constructor:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CustomDataPathHandler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DefaultODataPathHandler&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IConnectionStringSetter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_connectionStringSetter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CustomDataPathHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IConnectionStringSetter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connectionStringSetter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_connectionStringSetter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connectionStringSetter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ODataPath&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IEdmModel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;odataPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;odataPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;StartsWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;odataPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;IndexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;storeName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;odataPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Substring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;odataPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;IndexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entityPath&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;odataPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Substring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;odataPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;IndexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_connectionStringSetter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SetConnectionString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storeName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;DB&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;odataPath&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entityPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;odataPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that the &lt;inlinecode&gt;!odataPath.StartsWith(&amp;quot;$&amp;quot;)&lt;/inlinecode&gt; part helps to avoid errors when the user requests the metadata of the endpoint like:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;http://localhost:56949/odata/$metadata&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;Now that we created our custom path handler, we have to register it when declaring our OData route inside the &lt;inlinecode&gt;Register&lt;/inlinecode&gt; method of the static &lt;inlinecode&gt;WebApiConfig&lt;/inlinecode&gt; class:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;MapODataRoute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;routeName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;odata&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;routePrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;odata&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetEdmModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pathHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UnityConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UnityContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CustomDataPathHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;routingConventions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ODataRoutingConventions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CreateDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, we use Unity to resolve our instance of &lt;inlinecode&gt;CustomDataPathHandler&lt;/inlinecode&gt; because we need an &lt;inlinecode&gt;IConnectionStringSetter&lt;/inlinecode&gt; object to be injected into it.&lt;/p&gt;

&lt;h3&gt;Unity&lt;/h3&gt;

&lt;p&gt;The last point to note is that we need to have the same object of &lt;inlinecode&gt;IConnectionStringSetter&lt;/inlinecode&gt; and &lt;inlinecode&gt;IConnectionStringProvider&lt;/inlinecode&gt; used by our handler and then passed to our controller. To achieve this, we register the same instance for these both interfaces in the &lt;inlinecode&gt;RegisterComponents&lt;/inlinecode&gt; method of the the static &lt;inlinecode&gt;UnityConfig&lt;/inlinecode&gt; class:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;databaseSetter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DatabaseSetter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ConnectionStringSetter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;UnityContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RegisterInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IConnectionStringSetter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;databaseSetter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;UnityContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RegisterInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IConnectionStringProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;databaseSetter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;UnityContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RegisterType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CustomDataPathHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 

</feed>
